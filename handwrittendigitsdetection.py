# -*- coding: utf-8 -*-
"""HandwrittenDigitsDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r0XC2JTFA0WutsRyvx4L6IK6GXtFTOjh
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.utils import to_categorical
from keras.datasets import mnist
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.metrics import precision_score, recall_score, f1_score

(x, y), (_, _) = mnist.load_data()

# Split trainning set by (70%) and temp (30%)
x_train, x_temp, y_train, y_temp = train_test_split(x, y, test_size=0.3, random_state=42)

# Then, split the temp set into validation (50%) and test (50%)
x_val, x_test, y_val, y_test = train_test_split(x_temp, y_temp, test_size=0.5, random_state=42)

print(f"the shape of the training set (input) is: {x_train.shape}")
print(f"the shape of the training set (target) is: {y_train.shape}\n")
print(f"the shape of the cross validation set (input) is: {x_val.shape}")
print(f"the shape of the cross validation set (target) is: {y_val.shape}\n")
print(f"the shape of the test set (input) is: {x_test.shape}")
print(f"the shape of the test set (target) is: {y_test.shape}")

# Reshape dataset based on keras
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_val = x_val.reshape(x_val.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
print(x_train.shape)

# One hot encoding label
y_train = to_categorical(y_train, 10)
y_val = to_categorical(y_val, 10)
y_test = to_categorical(y_test, 10)
print('Original y ', y_train[0])
print('y after one-hot encoding ',y_train[0])

tf.random.set_seed(1234)
model = Sequential(
    [
    Conv2D(32, (3, 3), activation='sigmoid', input_shape=(28, 28, 1)),
    Conv2D(32, (3, 3), activation='sigmoid'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='sigmoid'),
    Dense(10, activation='softmax')
    ]
)
model.summary()

model.compile(loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),
    optimizer=tf.keras.optimizers.Adam(0.001),
              metrics=['accuracy'])

H = model.fit(x_train, y_train, validation_data=(x_val, y_val),
batch_size=32, epochs=10, verbose=1)

fig = plt.figure()
numOfEpoch = 10
plt.plot(np.arange(0, numOfEpoch), H.history['loss'], label='training loss')
plt.plot(np.arange(0, numOfEpoch), H.history['val_loss'], label='validation loss')
plt.plot(np.arange(0, numOfEpoch), H.history['accuracy'], label='accuracy')
plt.plot(np.arange(0, numOfEpoch), H.history['val_accuracy'], label='validation accuracy')
plt.title('Accuracy and Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss|Accuracy')
plt.legend()

score = model.evaluate(x_test, y_test,batch_size=32, verbose=0)
print('Loss: , Accuracy: ',score)

# Predict single images
plt.imshow(x_test[0].reshape(28,28), cmap='gray')
y_predict = model.predict(x_test[0].reshape(1,28,28,1))
print('Predicted number ', np.argmax(y_predict))

# Predict all images
y_predict = model.predict(x_test)

y_predict_bin = np.where(y_predict > 0.5, 1., 0.)

# Calculate Precision, Recall, and F1 Score
precision = precision_score(y_test, y_predict_bin,average='micro')
recall = recall_score(y_test, y_predict_bin,average='micro')
f1 = f1_score(y_test, y_predict_bin,average='micro')

# Display the results
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

